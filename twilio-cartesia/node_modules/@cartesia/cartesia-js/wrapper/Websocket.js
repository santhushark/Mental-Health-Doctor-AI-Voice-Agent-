"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Websocket_instances, _Websocket_isConnected, _Websocket_sampleRate, _Websocket_container, _Websocket_encoding, _Websocket_generateId;
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("../core"));
const environments = __importStar(require("../environments"));
const serializers = __importStar(require("../serialization"));
const emittery_1 = __importDefault(require("emittery"));
const human_id_1 = require("human-id");
const websocket_1 = require("../core/websocket");
const utils_1 = require("./utils");
const source_1 = __importDefault(require("./source"));
const qs_1 = __importDefault(require("qs"));
class Websocket {
    constructor({ sampleRate, container, encoding }, options) {
        this.options = options;
        _Websocket_instances.add(this);
        _Websocket_isConnected.set(this, false);
        _Websocket_sampleRate.set(this, void 0);
        _Websocket_container.set(this, void 0);
        _Websocket_encoding.set(this, void 0);
        __classPrivateFieldSet(this, _Websocket_sampleRate, sampleRate, "f");
        __classPrivateFieldSet(this, _Websocket_container, container !== null && container !== void 0 ? container : "raw", "f");
        __classPrivateFieldSet(this, _Websocket_encoding, encoding !== null && encoding !== void 0 ? encoding : "pcm_f32le", "f");
    }
    /**
     * Send a message over the WebSocket to start a stream.
     *
     * @param inputs - Generation parameters. Defined in the StreamRequest type.
     * @param options - Options for the stream.
     * @param options.timeout - The maximum time to wait for a chunk before cancelling the stream.
     *                          If set to `0`, the stream will not time out.
     * @returns A Source object that can be passed to a Player to play the audio.
     * @returns An Emittery instance that emits messages from the WebSocket.
     */
    send(inputs, { timeout = 0 } = {}) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _Websocket_isConnected, "f")) {
                throw new Error("Not connected to WebSocket. Call .connect() first.");
            }
            if (!inputs.contextId) {
                inputs.contextId = __classPrivateFieldGet(this, _Websocket_instances, "m", _Websocket_generateId).call(this);
            }
            if (!inputs.outputFormat) {
                inputs.outputFormat = (0, utils_1.resolveOutputFormat)(__classPrivateFieldGet(this, _Websocket_container, "f"), __classPrivateFieldGet(this, _Websocket_encoding, "f"), __classPrivateFieldGet(this, _Websocket_sampleRate, "f"));
            }
            (_a = this.socket) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(serializers.WebSocketTtsRequest.jsonOrThrow(inputs, { unrecognizedObjectKeys: "strip" })));
            const emitter = new emittery_1.default();
            const source = new source_1.default({
                sampleRate: __classPrivateFieldGet(this, _Websocket_sampleRate, "f"),
                encoding: __classPrivateFieldGet(this, _Websocket_encoding, "f"),
                container: __classPrivateFieldGet(this, _Websocket_container, "f"),
            });
            // Used to signal that the stream is complete, either because the
            // WebSocket has closed, or because the stream has finished.
            const streamCompleteController = new AbortController();
            // Set a timeout.
            let timeoutId = null;
            if (timeout > 0) {
                timeoutId = setTimeout(streamCompleteController.abort, timeout);
            }
            const handleMessage = (0, utils_1.createMessageHandlerForContextId)(inputs.contextId, ({ chunk, message, data }) => __awaiter(this, void 0, void 0, function* () {
                emitter.emit("message", message);
                if (data.type === "timestamps" && data.wordTimestamps) {
                    emitter.emit("timestamps", data.wordTimestamps);
                    return;
                }
                if ((0, utils_1.isSentinel)(chunk)) {
                    yield source.close();
                    streamCompleteController.abort();
                    return;
                }
                if (timeoutId) {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(streamCompleteController.abort, timeout);
                }
                if (!chunk) {
                    return;
                }
                yield source.enqueue((0, utils_1.base64ToArray)([chunk], __classPrivateFieldGet(this, _Websocket_encoding, "f")));
            }));
            (_b = this.socket) === null || _b === void 0 ? void 0 : _b.addEventListener("message", handleMessage);
            (_c = this.socket) === null || _c === void 0 ? void 0 : _c.addEventListener("close", () => {
                streamCompleteController.abort();
            });
            (_d = this.socket) === null || _d === void 0 ? void 0 : _d.addEventListener("error", () => {
                streamCompleteController.abort();
            });
            streamCompleteController.signal.addEventListener("abort", () => {
                source.close();
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }
                emitter.clearListeners();
            });
            return Object.assign(Object.assign({ source }, (0, utils_1.getEmitteryCallbacks)(emitter)), { stop: streamCompleteController.abort.bind(streamCompleteController) });
        });
    }
    continue(inputs) {
        var _a;
        if (!__classPrivateFieldGet(this, _Websocket_isConnected, "f")) {
            throw new Error("Not connected to WebSocket. Call .connect() first.");
        }
        if (!inputs.contextId) {
            throw new Error("context_id is required to continue a context.");
        }
        if (!inputs.outputFormat) {
            inputs.outputFormat = (0, utils_1.resolveOutputFormat)(__classPrivateFieldGet(this, _Websocket_container, "f"), __classPrivateFieldGet(this, _Websocket_encoding, "f"), __classPrivateFieldGet(this, _Websocket_sampleRate, "f"));
        }
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(Object.assign({ continue: true }, serializers.WebSocketTtsRequest.jsonOrThrow(inputs, { unrecognizedObjectKeys: "strip" }))));
    }
    /**
     * Authenticate and connect to a Cartesia streaming WebSocket.
     *
     * @returns A promise that resolves when the WebSocket is connected.
     * @throws {Error} If the WebSocket fails to connect.
     */
    connect(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _Websocket_isConnected, "f")) {
                throw new Error("WebSocket is already connected.");
            }
            const emitter = new emittery_1.default();
            this.socket = new websocket_1.ReconnectingWebSocket(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const baseUrl = ((_a = (yield core.Supplier.get(this.options.environment))) !== null && _a !== void 0 ? _a : environments.CartesiaEnvironment.Production).replace(/^https?:\/\//, "");
                const params = {
                    api_key: this.options.apiKey,
                    cartesia_version: this.options.cartesiaVersion,
                };
                return `wss://${baseUrl}/tts/websocket${qs_1.default.stringify(params, { addQueryPrefix: true })}`;
            }), undefined, options);
            this.socket.reconnect();
            this.socket.onopen = () => {
                __classPrivateFieldSet(this, _Websocket_isConnected, true, "f");
                emitter.emit("open");
            };
            this.socket.onclose = () => {
                __classPrivateFieldSet(this, _Websocket_isConnected, false, "f");
                emitter.emit("close");
            };
            return new Promise((resolve, reject) => {
                var _a, _b, _c;
                (_a = this.socket) === null || _a === void 0 ? void 0 : _a.addEventListener("open", () => {
                    resolve((0, utils_1.getEmitteryCallbacks)(emitter));
                });
                const aborter = new AbortController();
                (_b = this.socket) === null || _b === void 0 ? void 0 : _b.addEventListener("error", () => {
                    aborter.abort();
                    reject(new Error("WebSocket failed to connect."));
                });
                (_c = this.socket) === null || _c === void 0 ? void 0 : _c.addEventListener("close", () => {
                    aborter.abort();
                    reject(new Error("WebSocket closed before it could connect."));
                });
            });
        });
    }
    /**
     * Disconnect from the Cartesia streaming WebSocket.
     */
    disconnect() {
        var _a;
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.default = Websocket;
_Websocket_isConnected = new WeakMap(), _Websocket_sampleRate = new WeakMap(), _Websocket_container = new WeakMap(), _Websocket_encoding = new WeakMap(), _Websocket_instances = new WeakSet(), _Websocket_generateId = function _Websocket_generateId() {
    return (0, human_id_1.humanId)({
        separator: "-",
        capitalize: false,
    });
};
