import { ReconnectingWebSocket, Options } from "../core/websocket";
import type { WebSocketStreamOptions, WebSocketTtsRequest, WordTimestamps } from "../api";
import { ConnectionEventData, WebSocketOptions, EmitteryCallbacks } from "./utils";
import { Tts } from "../api/resources/tts/client/Client";
import Source from "./source";
export default class Websocket {
    #private;
    private readonly options;
    socket?: ReconnectingWebSocket;
    constructor({ sampleRate, container, encoding }: WebSocketOptions, options: Tts.Options);
    /**
     * Send a message over the WebSocket to start a stream.
     *
     * @param inputs - Generation parameters. Defined in the StreamRequest type.
     * @param options - Options for the stream.
     * @param options.timeout - The maximum time to wait for a chunk before cancelling the stream.
     *                          If set to `0`, the stream will not time out.
     * @returns A Source object that can be passed to a Player to play the audio.
     * @returns An Emittery instance that emits messages from the WebSocket.
     */
    send(inputs: WebSocketTtsRequest, { timeout }?: WebSocketStreamOptions): Promise<EmitteryCallbacks<{
        message: string;
        timestamps: WordTimestamps;
    }> & {
        source: Source;
        stop: unknown;
    }>;
    continue(inputs: WebSocketTtsRequest): void;
    /**
     * Authenticate and connect to a Cartesia streaming WebSocket.
     *
     * @returns A promise that resolves when the WebSocket is connected.
     * @throws {Error} If the WebSocket fails to connect.
     */
    connect(options?: Options): Promise<EmitteryCallbacks<ConnectionEventData>>;
    /**
     * Disconnect from the Cartesia streaming WebSocket.
     */
    disconnect(): void;
}
