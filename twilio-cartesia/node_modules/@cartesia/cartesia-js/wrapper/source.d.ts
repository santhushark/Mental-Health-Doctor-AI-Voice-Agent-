import Emittery from "emittery";
import { RawEncoding } from "../api";
import { SourceEventData, TypedArray } from "./utils";
export default class Source {
    #private;
    on: Emittery<SourceEventData>["on"];
    once: Emittery<SourceEventData>["once"];
    events: Emittery<SourceEventData>["events"];
    off: Emittery<SourceEventData>["off"];
    /**
     * Create a new Source.
     *
     * @param options - Options for the Source.
     * @param options.sampleRate - The sample rate of the audio.
     */
    constructor({ sampleRate, encoding, container }: {
        sampleRate: number;
        encoding: string;
        container: string;
    });
    get sampleRate(): number;
    get encoding(): RawEncoding;
    get container(): string;
    /**
     * Append audio to the buffer.
     *
     * @param src The audio to append.
     */
    enqueue(src: TypedArray): Promise<void>;
    /**
     * Read audio from the buffer.
     *
     * @param dst The buffer to read the audio into.
     * @returns The number of samples read. If the source is closed, this will be
     * less than the length of the provided buffer.
     */
    read(dst: TypedArray): Promise<number>;
    /**
     * Seek in the buffer.
     *
     * @param offset The offset to seek to.
     * @param whence The position to seek from.
     * @returns The new position in the buffer.
     * @throws {Error} If the seek is invalid.
     */
    seek(offset: number, whence: "start" | "current" | "end"): Promise<number>;
    /**
     * Get the number of samples in a given duration.
     *
     * @param durationSecs The duration in seconds.
     * @returns The number of samples.
     */
    durationToSampleCount(durationSecs: number): number;
    get buffer(): TypedArray;
    get readIndex(): number;
    get writeIndex(): number;
    /**
     * Close the source. This signals that no more audio will be enqueued.
     *
     * This will emit a "close" event.
     *
     * @returns A promise that resolves when the source is closed.
     */
    close(): Promise<void>;
}
