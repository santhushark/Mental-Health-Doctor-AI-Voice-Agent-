/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cartesia from "../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
export declare namespace Datasets {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
    }
}
export declare class Datasets {
    protected readonly _options: Datasets.Options;
    constructor(_options?: Datasets.Options);
    /**
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.list()
     */
    list(requestOptions?: Datasets.RequestOptions): Promise<Cartesia.PaginatedDatasets>;
    /**
     * @param {Cartesia.CreateDatasetRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.create({
     *         name: "string"
     *     })
     */
    create(request: Cartesia.CreateDatasetRequest, requestOptions?: Datasets.RequestOptions): Promise<Cartesia.Dataset>;
    /**
     * @param {string} id
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.listFiles("string")
     */
    listFiles(id: string, requestOptions?: Datasets.RequestOptions): Promise<Cartesia.PaginatedDatasetFiles>;
    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {string} id
     * @param {Cartesia.UploadDatasetFileRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.uploadFile(fs.createReadStream("/path/to/your/file"), "string", {})
     */
    uploadFile(file: File | fs.ReadStream | Blob, id: string, request: Cartesia.UploadDatasetFileRequest, requestOptions?: Datasets.RequestOptions): Promise<void>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-API-Key": string | undefined;
    }>;
}
