/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import { Blob } from "buffer";
import * as Cartesia from "../../../index";
export declare namespace VoiceChanger {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
    }
}
export declare class VoiceChanger {
    protected readonly _options: VoiceChanger.Options;
    constructor(_options?: VoiceChanger.Options);
    /**
     * Takes an audio file of speech, and returns an audio file of speech spoken with the same intonation, but with a different voice.
     *
     * This endpoint is priced at 15 characters per second of input audio.
     */
    bytes(clip: File | fs.ReadStream | Blob, request: Cartesia.VoiceChangerBytesRequest, requestOptions?: VoiceChanger.RequestOptions): Promise<ArrayBuffer>;
    sse(clip: File | fs.ReadStream | Blob, request: Cartesia.VoiceChangerSseRequest, requestOptions?: VoiceChanger.RequestOptions): Promise<core.Stream<Cartesia.StreamingResponse>>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-API-Key": string | undefined;
    }>;
}
