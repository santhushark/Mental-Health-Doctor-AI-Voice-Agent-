"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketTtsRequest = void 0;
const core = __importStar(require("../../../../core"));
const OutputFormat_1 = require("./OutputFormat");
const TtsRequestVoiceSpecifier_1 = require("./TtsRequestVoiceSpecifier");
exports.WebSocketTtsRequest = core.serialization.object({
    modelId: core.serialization.property("model_id", core.serialization.string()),
    outputFormat: core.serialization.property("output_format", OutputFormat_1.OutputFormat.optional()),
    transcript: core.serialization.string().optional(),
    voice: TtsRequestVoiceSpecifier_1.TtsRequestVoiceSpecifier,
    duration: core.serialization.number().optional(),
    language: core.serialization.string().optional(),
    addTimestamps: core.serialization.property("add_timestamps", core.serialization.boolean().optional()),
    contextId: core.serialization.property("context_id", core.serialization.string().optional()),
});
